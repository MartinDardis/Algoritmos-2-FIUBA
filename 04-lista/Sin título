bool lista_iter_insertar(lista_iter_t *iter, void *dato){
  lista_t *lista=((iter)->lista);
  if ( (iter->posicion) == 1 || lista_esta_vacia (lista))
    return lista_insertar_primero(lista,dato);
  if ( lista_iter_al_final(iter)){
    return lista_insertar_ultimo(lista,dato);
  }
  nodo_t* nuevo=malloc(sizeof(nodo_t));
  if (nuevo == NULL)
    return false;
  nodo_t *nodo_anterior=(iter->anterior);
  (nuevo->dato)=dato;
  (nuevo->siguiente)=(iter->actual);
  (nodo_anterior->siguiente)=nuevo;
  (iter->actual)=nuevo;
  (lista->elementos)++;
  return true;
}



void *lista_iter_borrar(lista_iter_t *iter){
    if((iter->posicion)=1){
      bool borro=lista_borrar_primero(iter->lista);
      if (borro && lista_esta_vacia(iter->lista)){
        iter->siguiente=NULL;
        iter->posicion=0;
      }
      return borro;
    }

    void* dato=((iter->actual)->dato);
    nodo_t *nuevo_actual=((iter->actual)->siguiente);
    free((iter->actual));
    (iter->actual)=nuevo_actual;
    ((iter->anterior)->siguiente)=nuevo_actual;
    ((iter->lista)->elementos)--;
    return dato;
}
